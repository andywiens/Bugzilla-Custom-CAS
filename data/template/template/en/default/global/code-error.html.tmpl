use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1297790525',
        'name' => 'global/code-error.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n";
    $output .=  "\n\n";
    $output .=  "\n";
#line 35 "template/en/default/global/code-error.html.tmpl"
    $output .=  $context->process('global/field-descs.none.tmpl');
    $output .=  "\n";
#line 37 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Internal Error', 1);
    $output .=  "\n";
#line 488 "template/en/default/global/code-error.html.tmpl"
    
    # CAPTURE
    $stash->set('error_message', do {
        my $output = '';
#line 487 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('error') eq 'attachment_local_storage_disabled') {
#line 41 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Local Storage Disabled');
    $output .=  "\n    You cannot store attachments locally. This feature is disabled.\n";
    }
    elsif ($stash->get('error') eq 'attachment_url_disabled') {
#line 45 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Attachment URL Disabled');
    $output .=  "\n    You cannot attach a URL. This feature is currently disabled.\n";
    }
    elsif ($stash->get('error') eq 'auth_invalid_email') {
#line 49 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Email Address');
    $output .=  "\n    We received an email address (<b>";
#line 50 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('addr');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</b>)\n    that didn't pass our syntax checking for a legal email address,\n    when trying to create or update your account.";
#line 58 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('default')) {
    $output .=  "\n      A legal address must contain exactly one '\@',\n      and at least one '.' after the \@.";
    }
    else {
    $output .=  "\n      ";
#line 57 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['Param', [ 'emailregexpdesc' ]]);
    }
    
    $output .=  "\n    It must also not contain any of these special characters:\n    <tt>\\ ( ) &amp; &lt; &gt; , ; : &quot; [ ]</tt>, or any whitespace.\n";
    }
    elsif ($stash->get('error') eq 'authres_unhandled') {
    $output .=  "\n    The result value of ";
#line 63 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value');
        
        &$_tt_filter($output);
    };
    
    $output .=  " was not handled by\n    the login code.\n";
    }
    elsif ($stash->get('error') eq 'bad_page_cgi_id') {
#line 67 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Page ID');
    $output .=  "\n    The ID <code>";
#line 68 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('page_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> is not a\n    valid page identifier.\n";
    }
    elsif ($stash->get('error') eq 'bad_arg') {
    $output .=  "\n    Bad argument <code>";
#line 72 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('argument');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> sent to\n    <code>";
#line 73 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('function');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> function.\n";
    }
    elsif ($stash->get('error') eq 'bug_error') {
    $output .=  "\n    Trying to retrieve ";
#line 76 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
#line 76 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'bug_id', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " returned \n    the error ";
#line 77 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['bug', 0, 'error', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n    ";
    }
    elsif ($stash->get('error') eq 'chart_data_not_generated') {
#line 80 "template/en/default/global/code-error.html.tmpl"
    $stash->set('admindocslinks', { 'extraconfig.html' => 'Setting up Charting'  });
#line 87 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('product')) {
    $output .=  "\n      Charts for the <em>";
#line 82 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('product');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> product are not\n      available yet because no charting data has been collected for it since it\n      was created.";
    }
    else {
    $output .=  "\n      No charting data has been collected yet.";
    }
    
    $output .=  "\n    Please wait a day and try again.\n    If you're seeing this message after a day, then you should contact\n    <a href=\"mailto:";
#line 90 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['Param', [ 'maintainer' ]]);
    $output .=  "\">";
#line 90 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['Param', [ 'maintainer' ]]);
    $output .=  "</a>\n    and reference this error.\n";
    }
    elsif ($stash->get('error') eq 'chart_datafile_corrupt') {
    $output .=  "\n    The chart data file ";
#line 94 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('file');
        
        &$_tt_filter($output);
    };
    
    $output .=  " is corrupt.\n        ";
    }
    elsif ($stash->get('error') eq 'chart_dir_nonexistent') {
    $output .=  "\n    One of the directories <tt>";
#line 97 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('dir');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tt> and \n    <tt>";
#line 98 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('graph_dir');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tt> does not exist.\n  ";
    }
    elsif ($stash->get('error') eq 'chart_file_open_fail') {
    $output .=  "\n    Unable to open the chart datafile <tt>";
#line 101 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('filename');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</tt>.\n  ";
    }
    elsif ($stash->get('error') eq 'column_not_null_without_default') {
    $output .=  "\n    Failed adding the column ";
#line 104 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  ":\n    You cannot add a NOT NULL column with no default to an existing table\n    unless you specify something for the <code>\$init_value</code> argument.\n";
    }
    elsif ($stash->get('error') eq 'column_not_null_no_default_alter') {
    $output .=  "\n    You cannot alter the ";
#line 109 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  " column to be NOT NULL \n    without specifying a default or something for \$set_nulls_to, because\n    there are NULL values currently in it.\n";
    }
    elsif ($stash->get('error') eq 'comment_extra_data_not_allowed') {
    $output .=  "\n    You tried to set the <code>extra_data</code> field to \n    '";
#line 115 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('extra_data');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' but comments of type ";
#line 115 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n    do not accept an <code>extra_data</code> argument.\n";
    }
    elsif ($stash->get('error') eq 'comment_extra_data_required') {
    $output .=  "\n    Comments of type ";
#line 119 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  " require an <code>extra_data</code>\n    argument to be set.\n";
    }
    elsif ($stash->get('error') eq 'comment_extra_data_not_numeric') {
    $output .=  "\n    You tried to set the <code>extra_data</code> field to\n    '";
#line 124 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('extra_data');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' but comments of type ";
#line 124 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n    require a numeric <code>extra_data</code> argument.\n";
    }
    elsif ($stash->get('error') eq 'comment_type_invalid') {
    $output .=  "\n    '";
#line 128 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' is not a valid comment type.\n";
    }
    elsif ($stash->get('error') eq 'db_rename_conflict') {
    $output .=  "\n    Name conflict: Cannot rename ";
#line 131 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('old');
        
        &$_tt_filter($output);
    };
    
    $output .=  " to";
#line 132 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('new');
        
        &$_tt_filter($output);
    };
    
    $output .=  " because ";
#line 132 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('new');
        
        &$_tt_filter($output);
    };
    
    $output .=  " already exists.\n";
    }
    elsif ($stash->get('error') eq 'cookies_need_value') {
    $output .=  "\n    Every cookie must have a value.\n";
    }
    elsif ($stash->get('error') eq 'env_no_email') {
#line 138 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " did not receive an email address from the \n    environment.";
#line 147 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get(['Param', [ 'auth_env_email' ]])) {
    $output .=  "\n      This means that the '";
#line 141 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['Param', [ 'auth_env_email' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n      environment variable was empty or did not exist.";
    }
    else {
    $output .=  "\n      You need to set the \"auth_env_email\" parameter to the name of\n      the environment variable that will contain the user's email\n      address.";
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'extension_disabled') {
#line 150 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Extension Disabled');
    $output .=  "\n    You cannot access this page because the extension '";
#line 151 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n    is disabled.\n";
    }
    elsif ($stash->get('error') eq 'extension_must_be_subclass') {
    $output .=  "\n    <code>";
#line 155 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('package');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> from \n    <code>";
#line 156 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('filename');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> is not a subclass of\n    <code>";
#line 157 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('class');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>.\n";
    }
    elsif ($stash->get('error') eq 'extension_must_return_name') {
    $output .=  "\n    <code>";
#line 160 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('extension');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> returned\n    <code>";
#line 161 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('returned');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>, which is not a valid name\n    for an extension. Extensions must return their name, not <code>1</code>\n    or a number. See the documentation of\n    <a href=\"";
#line 164 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('docs_urlbase');
        
        &$_tt_filter($output);
    };
    
    $output .=  "api/Bugzilla/Extension.html\">Bugzilla::Extension</a>\n    for details.\n";
    }
    elsif ($stash->get('error') eq 'extension_no_name') {
    $output .=  "\n    We did not find a <code>NAME</code> method in \n    <code>";
#line 169 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('package');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> (loaded from\n    <code>";
#line 170 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('filename');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>). This means that\n    the extension has one or more of the following problems:\n\n    <ul>\n      <li><code>";
#line 174 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('filename');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> did not define a\n        <code>";
#line 175 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('package');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> package.</li>\n      <li><code>";
#line 176 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('package');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> did not define a\n        <code>NAME</code> method (or the <code>NAME</code> method\n        returned an empty string).</li>\n    </ul>\n";
    }
    elsif ($stash->get('error') eq 'extern_id_conflict') {
    $output .=  "\n    The external ID '";
#line 182 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('extern_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' already exists\n    in the database for '";
#line 183 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('username');
        
        &$_tt_filter($output);
    };
    
    $output .=  "', but your\n    account source says that '";
#line 184 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('extern_user');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' has that ID.\n";
    }
    elsif ($stash->get('error') eq 'field_choice_must_use_type') {
    $output .=  "\n    When you call a class method on <code>Bugzilla::Field::Choice</code>,\n    you must call <code>Bugzilla::Field::Choice-&gt;type('some_field')</code>\n    to generate the right class (you can't call class methods directly\n    on Bugzilla::Field::Choice).\n";
    }
    elsif ($stash->get('error') eq 'field_not_custom') {
    $output .=  "\n    '";
#line 193 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'description', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "' (";
#line 193 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['field', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ")\n    is not a custom field.\n";
    }
    elsif ($stash->get('error') eq 'field_type_mismatch') {
    $output .=  "\n    Cannot seem to handle <code>";
#line 197 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>\n    and <code>";
#line 198 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> together.\n";
    }
    elsif ($stash->get('error') eq 'field_type_not_specified') {
#line 201 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Field Type Not Specified');
    $output .=  "\n    You must specify a type when creating a custom field.\n";
    }
    elsif ($stash->get('error') eq 'illegal_content_type_method') {
    $output .=  "\n    Your form submission got corrupted somehow.  The <em>content\n    method</em> field, which specifies how the content type gets determined,\n    should have been either <em>autodetect</em>, <em>list</em>,\n    or <em>manual</em>, but was instead\n    <em>";
#line 209 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('contenttypemethod');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.\n";
    }
    elsif ($stash->get('error') eq 'illegal_field') {
    $output .=  "\n    A legal ";
#line 212 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  " was not set.\n";
    }
    elsif ($stash->get('error') eq 'invalid_attach_id_to_obsolete') {
    $output .=  "\n     The attachment number of one of the attachments you wanted to obsolete,";
#line 216 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attach_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ", is invalid.\n          ";
    }
    elsif ($stash->get('error') eq 'invalid_customfield_type') {
#line 219 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Field Type');
    $output .=  "\n    The type <em>";
#line 220 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> is not a valid field type.\n";
    }
    elsif ($stash->get('error') eq 'invalid_dimensions') {
#line 223 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Dimensions');
    $output .=  "\n    The width or height specified is not a positive integer.\n";
    }
    elsif ($stash->get('error') eq 'invalid_feature') {
#line 227 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Feature Name');
#line 228 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('feature');
        
        &$_tt_filter($output);
    };
    
    $output .=  " is not a valid feature name. See\n    <code>OPTIONAL_MODULES</code> in \n    <code>Bugzilla::Install::Requirements</code> for valid names.\n";
    }
    elsif ($stash->get('error') eq 'invalid_flag_association') {
#line 233 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Flag Association');
    $output .=  "\n    Some flags do not belong to";
#line 239 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('attach_id')) {
    $output .=  "\n      attachment ";
#line 236 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attach_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
    }
    else {
    $output .=  "\n      ";
#line 238 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
#line 238 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('bug_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".";
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'invalid_series_id') {
#line 242 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Series');
    $output .=  "\n    The series_id ";
#line 243 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('series_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  " is not valid. It may be that\n    this series has been deleted.\n";
    }
    elsif ($stash->get('error') eq 'invalid_webservergroup') {
    $output .=  "\n    There is no such group: ";
#line 247 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('group');
        
        &$_tt_filter($output);
    };
    
    $output .=  ". Check your \$webservergroup\n    setting in ";
#line 248 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  './localconfig';
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('error') eq 'mismatched_bug_ids_on_obsolete') {
    $output .=  "\n    Attachment ";
#line 251 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attach_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  " (";
#line 251 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('description');
        
        &$_tt_filter($output);
    };
    
    $output .=  ") \n    is attached to ";
#line 252 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
#line 252 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attach_bug_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ", \n    but you tried to flag it as obsolete while creating a new attachment to ";
#line 254 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ";
#line 254 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('my_bug_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('error') eq 'feature_disabled') {
    $output .=  "\n    The ";
#line 1 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['install_string', [ ("feature_" . $stash->get('feature')) ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " feature is not\n    available in this ";
#line 258 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  ". ";
#line 263 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get(['user', 0, 'in_group', [ 'admin' ]])) {
    $output .=  "\n      If you would like to enable this feature, please run \n      <kbd>checksetup.pl</kbd> to see how to install the necessary\n      requirements for this feature.";
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'flag_unexpected_object') {
#line 266 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Object Not Recognized');
    $output .=  "\n    Flags cannot be set for objects of type ";
#line 267 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('caller');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n    They can only be set for ";
#line 268 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bugs', 0]);
    $output .=  " and attachments.\n";
    }
    elsif ($stash->get('error') eq 'flag_requestee_disabled') {
#line 271 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Flag not Requestable from Specific Person');
    $output .=  "\n    You can't ask a specific person for\n    <em>";
#line 273 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['type', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.\n  ";
    }
    elsif ($stash->get('error') eq 'flag_type_inactive') {
#line 276 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Inactive Flag Type');
    $output .=  "\n    The flag type ";
#line 277 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('type');
        
        &$_tt_filter($output);
    };
    
    $output .=  " is inactive and cannot be used\n    to create new flags.\n";
    }
    elsif ($stash->get('error') eq 'flag_type_nonexistent') {
    $output .=  "\n    There is no flag type with the ID <em>";
#line 281 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.\n";
    }
    elsif ($stash->get('error') eq 'flag_type_target_type_invalid') {
    $output .=  "\n    The target type was neither <em>";
#line 284 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  "</em> nor <em>attachment</em>\n    but rather <em>";
#line 285 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('target_type');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.\n  ";
    }
    elsif ($stash->get('error') eq 'invalid_field_name') {
    $output .=  "\n    Can't use ";
#line 288 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  " as a field name.\n";
    }
    elsif ($stash->get('error') eq 'invalid_keyword_id') {
    $output .=  "\n    The keyword ID <em>";
#line 291 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('id');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> couldn't be\n    found.\n";
    }
    elsif ($stash->get('error') eq 'invalid_user') {
#line 295 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid User');
    $output .=  "\n    There is no user account";
#line 303 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('user_id')) {
    $output .=  "\n      with ID <em>";
#line 298 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('user_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.";
    }
    elsif ($stash->get('user_login')) {
    $output .=  "\n      with login name <em>";
#line 300 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('user_login');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em>.";
    }
    else {
    $output .=  "\n      given.";
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'jobqueue_insert_failed') {
#line 306 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Job Queue Failure');
    $output .=  "\n    Inserting a <code>";
#line 307 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('job');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> job into the Job \n    Queue failed with the following error: ";
#line 308 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('errmsg');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'jobqueue_no_job_mapping') {
    $output .=  "\n    <code>Bugzilla::JobQueue</code> has not been configured to handle\n    the job \"";
#line 312 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('job');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\".  You need to add this job type\n    to the <code>JOB_MAP</code> constant in <code>Bugzilla::JobQueue</code>.\n";
    }
    elsif ($stash->get('error') eq 'ldap_bind_failed') {
    $output .=  "\n    Failed to bind to the LDAP server. The error message was: \n    <code>";
#line 317 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('errstr');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>\n";
    }
    elsif ($stash->get('error') eq 'ldap_cannot_retreive_attr') {
    $output .=  "\n    The specified LDAP attribute ";
#line 320 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attr');
        
        &$_tt_filter($output);
    };
    
    $output .=  " was not found.\n";
    }
    elsif ($stash->get('error') eq 'ldap_connect_failed') {
    $output .=  "\n    Could not connect to the LDAP server(s) <code>";
#line 323 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('server');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>.\n";
    }
    elsif ($stash->get('error') eq 'ldap_start_tls_failed') {
    $output .=  "\n    Could not start TLS with LDAP server: <code>";
#line 326 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('error');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>.\n";
    }
    elsif ($stash->get('error') eq 'ldap_search_error') {
    $output .=  "\n    An error occurred while trying to search LDAP for \n    &quot;";
#line 330 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('username');
        
        &$_tt_filter($output);
    };
    
    $output .=  "&quot;: ";
#line 335 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('errstr')) {
    $output .=  "\n      <code>";
#line 332 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('errstr');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>";
    }
    else {
    $output .=  "\n      Unable to find user in LDAP";
    }
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'ldap_server_not_defined') {
    $output .=  "\n    The LDAP server for authentication has not been defined.\n";
    }
    elsif ($stash->get('error') eq 'mail_send_error') {
    $output .=  "\n    There was an error sending mail from '";
#line 341 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['mail', 0, 'header', [ 'From' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "'\n    to '";
#line 342 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['mail', 0, 'header', [ 'To' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "':";
#line 343 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('msg');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'missing_bug_id') {
    $output .=  "\n    No ";
#line 346 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'bug', 0]);
    $output .=  " ID was given.\n    ";
    }
    elsif ($stash->get('error') eq 'missing_series_id') {
    $output .=  "\n    Having inserted a series into the database, no series_id was returned for\n    it. Series: ";
#line 350 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['series', 0, 'category', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " / \n    ";
#line 351 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['series', 0, 'subcategory', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " / \n    ";
#line 352 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['series', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n    ";
    }
    elsif ($stash->get('error') eq 'need_quipid') {
    $output .=  "\n    A valid quipid is needed.\n";
    }
    elsif ($stash->get('error') eq 'object_dep_sort_loop') {
    $output .=  "\n    There is a loop in VALIDATOR_DEPENDENCIES involving\n    '";
#line 359 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  "'. Here are the fields we considered:\n    ";
#line 360 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['considered', 0, 'join', [ ', ' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('error') eq 'param_invalid') {
#line 363 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Parameter');
    $output .=  "\n    <code>";
#line 364 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('param');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> is not a valid parameter\n    for the ";
#line 365 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('function');
        
        &$_tt_filter($output);
    };
    
    $output .=  " function.\n";
    }
    elsif ($stash->get('error') eq 'param_must_be_numeric') {
#line 368 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Invalid Parameter');
    $output .=  "\n    Invalid parameter <code>";
#line 369 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('param');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> passed to \n    <code>";
#line 370 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('function');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>: It must be numeric.\n";
    }
    elsif ($stash->get('error') eq 'param_required') {
#line 373 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Missing Parameter');
    $output .=  "\n    The function <code>";
#line 374 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('function');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> requires\n    a <code>";
#line 375 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('param');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> argument, and that\n    argument was not set.\n";
    }
    elsif ($stash->get('error') eq 'params_required') {
#line 379 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Missing Parameter');
    $output .=  "\n    The function <code>";
#line 380 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('function');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> requires\n    that you set one of the following parameters:\n    <code>";
#line 382 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['params', 0, 'join', [ ', ' ]]);
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>\n";
    }
    elsif ($stash->get('error') eq 'product_empty_group_controls') {
#line 385 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Missing Group Controls');
    $output .=  "\n    New settings must be defined to edit group controls for\n    the ";
#line 387 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['group', 0, 'name', 0]);
        
        &$_tt_filter($output);
    };
    
    $output .=  " group.\n";
    }
    elsif ($stash->get('error') eq 'product_illegal_group_control') {
#line 390 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Illegal Group Control');
    $output .=  "\n    '";
#line 391 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' is not a legal value for\n    the '";
#line 392 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' field.\n";
    }
    elsif ($stash->get('error') eq 'protection_violation') {
    $output .=  "\n    The function <code>";
#line 395 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('function');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> was called\n";
#line 399 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('argument')) {
    $output .=  "\n        with the argument <code>";
#line 398 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('argument');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>";
    }
    
    $output .=  "\n\n    from\n   ";
#line 405 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('caller')) {
    $output .=  "\n        <code>";
#line 404 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('caller');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>, which is";
    }
    
    $output .=  "\n\n    outside the package. This function may only be called from\n    a subclass of <code>";
#line 408 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('superclass');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>.\n";
    }
    elsif ($stash->get('error') eq 'radius_preparation_error') {
    $output .=  "\n    An error occurred while preparing for a RADIUS authentication request:\n    <code>";
#line 412 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('errstr');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>.\n";
    }
    elsif ($stash->get('error') eq 'report_axis_invalid') {
    $output .=  "\n    <em>";
#line 415 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('val');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> is not a valid value for \n    ";
#line 419 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('fld') eq 'x') {
    $output .=  "the horizontal axis\n    ";
    }
    elsif ($stash->get('fld') eq 'y') {
    $output .=  "the vertical axis\n    ";
    }
    elsif ($stash->get('fld') eq 'z') {
    $output .=  "the multiple tables/images\n    ";
    }
    else {
    $output .=  "a report axis";
    }
    
    $output .=  " field.\n";
    }
    elsif ($stash->get('error') eq 'setting_info_invalid') {
    $output .=  "\n    To create a new setting, you must supply a setting name, a list of \n    value/sortindex pairs, and the default value.\n";
    }
    elsif ($stash->get('error') eq 'setting_name_invalid') {
    $output .=  "\n    The setting name <em>";
#line 426 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> is not a valid\n    option. Setting names must begin with a letter, and contain only\n    letters, digits, or the symbols '_', '-', '.', or ':'.\n";
    }
    elsif ($stash->get('error') eq 'setting_subclass_invalid') {
    $output .=  "\n    There is no such Setting subclass as\n    <code>";
#line 432 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('subclass');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>.\n";
    }
    elsif ($stash->get('error') eq 'setting_value_invalid') {
    $output .=  "\n    The value \"<code>";
#line 435 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('value');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code>\" is not in the list of\n    legal values for the <em>";
#line 436 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</em> setting.\n";
    }
    elsif ($stash->get('error') eq 'token_generation_error') {
    $output .=  "\n    Something is seriously wrong with the token generation system.\n";
    }
    elsif ($stash->get('error') eq 'template_error') {
#line 442 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('template_error_msg');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n";
    }
    elsif ($stash->get('error') eq 'template_invalid') {
    $output .=  "\n    Template with invalid file name found in hook call: ";
#line 445 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('name');
        
        &$_tt_filter($output);
    };
    
    $output .=  ".\n";
    }
    elsif ($stash->get('error') eq 'unable_to_retrieve_password') {
    $output .=  "\n     I was unable to retrieve your old password from the database.\n";
    }
    elsif ($stash->get('error') eq 'undefined_field') {
    $output .=  "\n    Form field ";
#line 451 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('field');
        
        &$_tt_filter($output);
    };
    
    $output .=  " was not defined.\n    ";
    }
    elsif ($stash->get('error') eq 'unknown_method') {
    $output .=  "\n    The requested method '";
#line 454 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('method');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' was not found.\n";
    }
    elsif ($stash->get('error') eq 'usage_mode_invalid') {
    $output .=  "\n    '";
#line 457 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('invalid_usage_mode');
        
        &$_tt_filter($output);
    };
    
    $output .=  "' is not a valid usage mode.\n";
    }
    elsif ($stash->get('error') eq 'must_be_patch') {
#line 460 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Attachment Must Be Patch');
    $output .=  "\n    Attachment #";
#line 461 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('attach_id');
        
        &$_tt_filter($output);
    };
    
    $output .=  " must be a patch.\n";
    }
    elsif ($stash->get('error') eq 'not_in_transaction') {
    $output .=  "\n    Attempted to end transaction without starting one first.\n";
    }
    elsif ($stash->get('error') eq 'comma_operator_deprecated') {
#line 467 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'SQL query generator internal error');
    $output .=  "\n    There is an internal error in the SQL query generation code,\n    creating queries with implicit JOIN.\n";
    }
    elsif ($stash->get('error') eq 'invalid_post_bug_submit_action') {
    $output .=  "\n    Invalid setting for post_bug_submit_action\n";
    }
    else {
    $output .=  "\n    ";
#line 476 "template/en/default/global/code-error.html.tmpl"
    $stash->set('error_message', $stash->get(['Hook', 0, 'process', [ 'errors' ]]));
#line 486 "template/en/default/global/code-error.html.tmpl"
    if (! $stash->get('error_message')) {
#line 478 "template/en/default/global/code-error.html.tmpl"
    $stash->set('title', 'Internal error');
    $output .=  "\n      An internal error has occurred, but ";
#line 479 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " doesn't know\n      what <code>";
#line 480 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('error');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</code> means.\n\n      If you are a ";
#line 482 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " end-user seeing this message, please save\n      this page and send it to ";
#line 483 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['Param', [ 'maintainer' ]]);
    $output .=  ".";
    }
    else {
#line 485 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('error_message');
        
        &$_tt_filter($output);
    };
    
    }
    
    }
    
        $output;
    });
    
    $output .=  "\n\n";
#line 491 "template/en/default/global/code-error.html.tmpl"
    # USE
    $stash->set('Bugzilla',
                $context->plugin('Bugzilla'));
#line 499 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get(['Bugzilla', 0, 'error_mode', 0]) ne '0') {
#line 497 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get(['Bugzilla', 0, 'usage_mode', 0]) eq '0') {
#line 494 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('error_message');
        
        &$_tt_filter($output);
    };
    
    }
    else {
#line 496 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('txt')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('error_message');
        
        &$_tt_filter($output);
    };
    
    }
    
#line 498 "template/en/default/global/code-error.html.tmpl"
    $context->throw('return', '', \$output);
    }
    
    $output .=  "\n";
#line 503 "template/en/default/global/code-error.html.tmpl"
    if (!($stash->get('header_done'))) {
#line 502 "template/en/default/global/code-error.html.tmpl"
    $output .=  $context->process('global/header.html.tmpl');
    }
    
    $output .=  "\n";
#line 505 "template/en/default/global/code-error.html.tmpl"
    $output .=  $context->process('global/docslinks.html.tmpl', { 'docslinks' => $stash->get('docslinks'), 'admindocslinks' => $stash->get('admindocslinks') });
    $output .=  "\n\n<tt>\n  <p>";
#line 512 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['terms', 0, 'Bugzilla', 0]);
    $output .=  " has suffered an internal error. Please save this page and send\n    it to ";
#line 513 "template/en/default/global/code-error.html.tmpl"
    $output .=  $stash->get(['Param', [ 'maintainer' ]]);
    $output .=  " with details of what you were doing at\n    the time this message appeared.\n  </p>\n  <script type=\"text/javascript\"> <!--\n    document.write(\"<p>URL: \" + \n                    document.location.href.replace(/&/g,\"&amp;\")\n                                          .replace(/</g,\"&lt;\")\n                                          .replace(/>/g,\"&gt;\") + \"</p>\");\n  // -->\n  </script>\n</tt>\n\n<table cellpadding=\"20\">\n  <tr>\n    <td bgcolor=\"#ff0000\">\n      <font size=\"+2\">";
#line 529 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('none')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('error_message');
        
        &$_tt_filter($output);
    };
    
    $output .=  "\n      </font>\n    </td>\n  </tr>\n</table>\n\n<p>Traceback:</p>\n<pre>";
#line 536 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html_linebreak')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('traceback');
        
        &$_tt_filter($output);
    };
    
    $output .=  "</pre>\n";
#line 545 "template/en/default/global/code-error.html.tmpl"
    if ($stash->get('variables')) {
    $output .=  "\n  <pre>\nVariables:";
#line 543 "template/en/default/global/code-error.html.tmpl"
    
    # FOREACH 
    do {
        my ($_tt_value, $_tt_error, $_tt_oldloop);
        my $_tt_list = $stash->get(['variables', 0, 'keys', 0]);
        
        unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
            $_tt_list = Template::Config->iterator($_tt_list)
                || die $Template::Config::ERROR, "\n"; 
        }
    
        ($_tt_value, $_tt_error) = $_tt_list->get_first();
        eval { $_tt_oldloop = $stash->get('loop') };
        $stash->set('loop', $_tt_list);
        eval {
    FOR1:   while (! $_tt_error) {
                $stash->{'key'} = $_tt_value;
    $output .=  "\n    ";
#line 542 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get('key');
        
        &$_tt_filter($output);
    };
    
    $output .=  ": ";
#line 542 "template/en/default/global/code-error.html.tmpl"
    
    # FILTER
    $output .=  do {
        my $output = '';
        my $_tt_filter = $context->filter('html')
                  || $context->throw($context->error);
    
    $output .=  $stash->get(['variables', 0, $stash->get('key'), 0]);
        
        &$_tt_filter($output);
    };
    ;
                ($_tt_value, $_tt_error) = $_tt_list->get_next();
            }
        };
        $stash->set('loop', $_tt_oldloop);
        die $@ if $@;
        $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
        die $_tt_error if $_tt_error;
    };
    
    $output .=  "\n  </pre>";
    }
    
    $output .=  "\n";
#line 547 "template/en/default/global/code-error.html.tmpl"
    $output .=  $context->process('global/footer.html.tmpl');
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {

    },
});
