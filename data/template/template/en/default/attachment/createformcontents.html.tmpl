use utf8;

#------------------------------------------------------------------------
# Compiled template generated by the Template Toolkit version 2.22
#------------------------------------------------------------------------

Template::Document->new({
    METADATA => {
        'modtime' => '1297790525',
        'name' => 'attachment/createformcontents.html.tmpl',
    },
    BLOCK => sub {
        my $context = shift || die "template sub called without context\n";
        my $stash   = $context->stash;
        my $output  = '';
        my $_tt_error;
        
        eval { BLOCK: {
    $output .=  "\n\n<tr>\n  <th><label for=\"data\">File</label>:</th>\n  <td>\n    <em>Enter the path to the file on your computer.</em><br>\n    <input type=\"file\" id=\"data\" name=\"data\" size=\"50\"";
#line 31 "template/en/default/attachment/createformcontents.html.tmpl"
    if ($stash->get(['Param', [ 'allow_attach_url' ]])) {
    $output .=  "\n        onchange=\"DataFieldHandler()\" ";
    }
    
    $output .=  "\n    >\n  </td>\n</tr>";
#line 46 "template/en/default/attachment/createformcontents.html.tmpl"
    if ($stash->get(['Param', [ 'maxlocalattachment' ]])) {
    $output .=  "\n<tr class=\"expert_fields\">\n  <th>BigFile:</th>\n  <td>\n    <input type=\"checkbox\" id=\"bigfile\"\n           name=\"bigfile\" value=\"bigfile\">\n    <label for=\"bigfile\">\n      Big File - Stored locally and may be purged\n    </label>\n  </td>\n</tr>";
    }
    
#line 58 "template/en/default/attachment/createformcontents.html.tmpl"
    if ($stash->get(['Param', [ 'allow_attach_url' ]])) {
    $output .=  "\n<tr class=\"expert_fields\">\n  <th><label for=\"attachurl\">AttachURL</label>:</th>\n  <td>\n    <em>URL to be attached instead.</em><br>\n    <input type=\"text\" id=\"attachurl\" name=\"attachurl\" size=\"60\" \n           maxlength=\"2000\"\n           onkeyup=\"URLFieldHandler()\" onblur=\"URLFieldHandler()\">\n  </td>\n</tr>\n</tbody>";
    }
    
    $output .=  "\n<tr>\n  <th><label for=\"description\">Description</label>:</th>\n  <td>\n    <em>Describe the attachment briefly.</em><br>\n    <input type=\"text\" id=\"description\" name=\"description\" size=\"60\" maxlength=\"200\">\n  </td>\n</tr>\n<tr class=\"expert_fields\">\n  <th>Content Type:</th>\n  <td>\n    <em>If the attachment is a patch, check the box below.</em><br>\n    <input type=\"checkbox\" id=\"ispatch\" name=\"ispatch\" value=\"1\"\n           onchange=\"setContentTypeDisabledState(this.form);\">\n    <label for=\"ispatch\">patch</label><br><br>\n    ";
    $output .=  "\n    <script type=\"text/javascript\">\n      YAHOO.util.Event.onDOMReady(function() {\n          bz_fireEvent(document.getElementById('ispatch'), 'change');\n      });\n    </script>\n\n    <em>Otherwise, choose a method for determining the content type.</em><br>\n    <input type=\"radio\" id=\"autodetect\"\n           name=\"contenttypemethod\" value=\"autodetect\" checked=\"checked\">\n      <label for=\"autodetect\">auto-detect</label><br>\n    <input type=\"radio\" id=\"list\"\n           name=\"contenttypemethod\" value=\"list\">\n      <label for=\"list\">select from list</label>:\n      <select name=\"contenttypeselection\" id=\"contenttypeselection\"\n              onchange=\"this.form.contenttypemethod[1].checked = true;\">";
#line 89 "template/en/default/attachment/createformcontents.html.tmpl"
    $output .=  $context->process('content_types');
    $output .=  "\n      </select><br>\n    <input type=\"radio\" id=\"manual\"\n                 name=\"contenttypemethod\" value=\"manual\">\n      <label for=\"manual\">enter manually</label>:\n      <input type=\"text\" name=\"contenttypeentry\" id=\"contenttypeentry\"\n             size=\"30\" maxlength=\"200\"\n             onchange=\"if (this.value) this.form.contenttypemethod[2].checked = true;\">\n  </td>\n</tr>\n<tr class=\"expert_fields\">\n  <td> </td>\n  <td>";
#line 104 "template/en/default/attachment/createformcontents.html.tmpl"
    if ($stash->get('flag_types') && $stash->get(['flag_types', 0, 'size', 0]) > 0) {
#line 103 "template/en/default/attachment/createformcontents.html.tmpl"
    $output .=  $context->process('flag/list.html.tmpl', { 'bug_id' => $stash->get('bugid'), 'attach_id' => $stash->get('attachid') });
    $output .=  "<br>";
    }
    
    $output .=  "\n  </td>\n</tr>\n";
    
    $output .=  "\n";
        } };
        if ($@) {
            $_tt_error = $context->catch($@, \$output);
            die $_tt_error unless $_tt_error->type eq 'return';
        }
    
        return $output;
    },
    DEFBLOCKS => {
        'content_types' => sub {
            my $context = shift || die "template sub called without context\n";
            my $stash   = $context->stash;
            my $output  = '';
            my $_tt_error;
            
            eval { BLOCK: {
#line 109 "template/en/default/attachment/createformcontents.html.tmpl"
        $stash->set('mimetypes', [ { 'type' => 'text/plain', 'desc' => 'plain text'  }, { 'type' => 'text/html', 'desc' => 'HTML source'  }, { 'type' => 'application/xml', 'desc' => 'XML source'  }, { 'type' => 'image/gif', 'desc' => 'GIF image'  }, { 'type' => 'image/jpeg', 'desc' => 'JPEG image'  }, { 'type' => 'image/png', 'desc' => 'PNG image'  }, { 'type' => 'application/octet-stream', 'desc' => 'binary file'  } ]);
#line 117 "template/en/default/attachment/createformcontents.html.tmpl"
        $output .=  $stash->get(['Hook', 0, 'process', [ 'mimetypes', 'attachment/createformcontents.html.tmpl' ]]);
        $output .=  "\n";
#line 121 "template/en/default/attachment/createformcontents.html.tmpl"
        
        # FOREACH 
        do {
            my ($_tt_value, $_tt_error, $_tt_oldloop);
            my $_tt_list = $stash->get('mimetypes');
            
            unless (UNIVERSAL::isa($_tt_list, 'Template::Iterator')) {
                $_tt_list = Template::Config->iterator($_tt_list)
                    || die $Template::Config::ERROR, "\n"; 
            }
        
            ($_tt_value, $_tt_error) = $_tt_list->get_first();
            eval { $_tt_oldloop = $stash->get('loop') };
            $stash->set('loop', $_tt_list);
            eval {
        FOR1:   while (! $_tt_error) {
                    $stash->{'m'} = $_tt_value;
        $output .=  "\n    <option value=\"";
#line 120 "template/en/default/attachment/createformcontents.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['m', 0, 'type', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  "\">";
#line 120 "template/en/default/attachment/createformcontents.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['m', 0, 'desc', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  " (";
#line 120 "template/en/default/attachment/createformcontents.html.tmpl"
        
        # FILTER
        $output .=  do {
            my $output = '';
            my $_tt_filter = $context->filter('html')
                      || $context->throw($context->error);
        
        $output .=  $stash->get(['m', 0, 'type', 0]);
            
            &$_tt_filter($output);
        };
        
        $output .=  ")</option>";;
                    ($_tt_value, $_tt_error) = $_tt_list->get_next();
                }
            };
            $stash->set('loop', $_tt_oldloop);
            die $@ if $@;
            $_tt_error = 0 if $_tt_error && $_tt_error eq Template::Constants::STATUS_DONE;
            die $_tt_error if $_tt_error;
        };
        
            } };
            if ($@) {
                $_tt_error = $context->catch($@, \$output);
                die $_tt_error unless $_tt_error->type eq 'return';
            }
        
            return $output;
        },
    },
});
